AWSTemplateFormatVersion: "2010-09-09"
Description: Vinyl Store Application Stack deployed with Azure Devops Pipelines
Resources:

#LAMBDA FUNCTIONS - CRUD - VINYLS
  VinylStoreLambdaGETVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncGETVinylsName
      Handler: !Sub ${VinylStoreLambdaGETVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the GET requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaUPDATEVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncUPDATEVinylsName
      Handler: !Sub ${VinylStoreLambdaUPDATEVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the UPDATE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaPOSTVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncPOSTVinylsName
      Handler: !Sub ${VinylStoreLambdaPOSTVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the POST requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaDELETEVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncDELETEVinylsName
      Handler: !Sub ${VinylStoreLambdaDELETEVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the DELETE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable

#LAMBDA PERMISSIONS - VINYLS
  VinylStoreLambdaGETVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaGETVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaUPDATEVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaUPDATEVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaPOSTVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaPOSTVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaDELETEVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaDELETEVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment

#LAMBDA FUNCTIONS - PRESIGNED URLS
  VinylStoreLambdaGETPresignedURLs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncGETPresignedURLSName
      Handler: !Sub ${VinylStoreLambdaGETPresignedURLSScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to create presigned urls to upload images to s3 bucket
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: VinylStoreS3BucketImagesName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreS3BucketImages

#LAMBDA PERMISSIONS - PRESIGNED URLS
  VinylStoreLambdaGETPresignedURLsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaGETPresignedURLs.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment

#LAMBDA ROLE
  VinylStoreRoleLambdas:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to all the lambda functions and control their interaction with dynamoDB and the S3 Bucket that contains the images
      Policies:
        - PolicyName: VinylStoreRoleLambdasPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt VinylStoreDynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                  - s3:ListObjects
                Resource: !GetAtt VinylStoreS3BucketImages.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
      RoleName: VinylStoreRoleLambdas
      Tags:
        - Key: user
          Value: !Ref UsernameTag

#DYNAMODB TABLE - VINYLS
  VinylStoreDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: user
          Value: !Ref UsernameTag

#API GATEWAY - GENERAL RESOURCES
  VinylStoreAPIGatewayRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API to handle the Vinyl Store Application requests
      Name:
        Ref: APIName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn:
      - VinylStoreLambdaGETVinyls
      - VinylStoreLambdaUPDATEVinyls
      - VinylStoreLambdaPOSTVinyls
      - VinylStoreLambdaDELETEVinyls
      - VinylStoreLambdaGETPresignedURLs
  VinylStoreAPIGatewayAuthorizer:
    Type: "AWS::ApiGateway::Authorizer"
    Properties:
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: VinylStoreAPIGatewayAuthorizer
      ProviderARNs:
        - !GetAtt VinylStoreCognitoUserPool.Arn
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
  VinylStoreAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Deployment for the Frontend to connect to the API Gateway
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      StageName: !Ref "EnvironmentName"
    DependsOn:
      - VinylStoreAPIGatewayMethodGETVinyls
      - VinylStoreAPIGatewayMethodUPDATEVinyls
      - VinylStoreAPIGatewayMethodPOSTVinyls
      - VinylStoreAPIGatewayMethodDELETEVinyls
      - VinylStoreAPIGatewayMethodOPTIONSVinyls
      - VinylStoreAPIGatewayMethodOPTIONSPresignedURLS
      - VinylStoreAPIGatewayMethodGETPresignedURLS

#API Gateway - VINYLS RESOURCES
  VinylStoreAPIGatewayResourceVinyls:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ParentId: !GetAtt "VinylStoreAPIGatewayRESTAPI.RootResourceId"
      PathPart: !Ref "APIGatewayResourceVinylsPathPart"
  VinylStoreAPIGatewayMethodGETVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizer
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: GET
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGETVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodUPDATEVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizer
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: PUT
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaUPDATEVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodPOSTVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizer
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: POST
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaPOSTVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodDELETEVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizer
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: DELETE
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaDELETEVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodOPTIONSVinyls:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      OperationName: VinylsOptions
      ResourceId: !Ref VinylStoreAPIGatewayResourceVinyls
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

#API Gateway - PRESIGNED URLS RESOURCES
  VinylStoreAPIGatewayResourcePresignedURLS:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ParentId: !GetAtt "VinylStoreAPIGatewayRESTAPI.RootResourceId"
      PathPart: !Ref "APIGatewayResourcePresignedURLSPathPart"
  VinylStoreAPIGatewayMethodGETPresignedURLS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizer
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourcePresignedURLS"
      HttpMethod: GET
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGETPresignedURLs.Arn}/invocations"
  VinylStoreAPIGatewayMethodOPTIONSPresignedURLS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      OperationName: PresignedURLsOptions
      ResourceId: !Ref VinylStoreAPIGatewayResourcePresignedURLS
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

#S3 BUCKET IMAGES
  VinylStoreS3BucketImages:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref VinylStoreS3BucketImagesName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedOrigins:
              - '*'
            Id: VinylStoreS3BucketImagesCORSRule
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreS3BucketImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VinylStoreS3BucketImagesName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt VinylStoreCognitoIAMRoleClients.Arn
                - !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
            Action: 
              - s3:Get*
              - s3:List*
            Resource: !Sub arn:aws:s3:::${VinylStoreS3BucketImagesName}/*  
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
                - !GetAtt VinylStoreRoleLambdas.Arn
            Action: 
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${VinylStoreS3BucketImagesName}/*
  

#CLOUDFRONT RESOURCES
  VinylStoreCloudFrontS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref VinylStoreCloudFrontS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Origin Access Identity to get the objects from the Vinyl Store CloudFront Bucket"
  VinylStoreCloudFrontS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VinylStoreCloudFrontS3BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: AccessObjectsOnlyThroughASpecificCloudFrontDistribution
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${VinylStoreCloudFrontOriginIdentity}"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${VinylStoreCloudFrontS3BucketName}/*
  VinylStoreCloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31535999
        MinTTL: 72000
        Name: VinylStoreCacheBasic
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all
  VinylStorePublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !Sub ${VinylStoreCloudFrontS3BucketName}.s3.us-east-1.amazonaws.com
            Id: !Sub S3-${VinylStoreCloudFrontS3BucketName}
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${VinylStoreCloudFrontOriginIdentity}"
        Enabled: true
        Comment: CloudFront distribution dedicated to deploy the Frontend files for the Vinyl Store application
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: !Ref VinylStoreCloudFrontCachePolicy
          TargetOriginId: !Sub S3-${VinylStoreCloudFrontS3BucketName}
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: /index.html
      Tags:
        - Key: user
          Value: !Ref UsernameTag

#COGNITO RESOURCES
  VinylStoreCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${VinylStoreCognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
  VinylStoreCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      CallbackURLs:
        - http://localhost:4200/home
      UserPoolId: !Ref VinylStoreCognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
  VinylStoreCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref VinylStoreCognitoDomain
      UserPoolId: !Ref VinylStoreCognitoUserPool
  VinylStoreCognitoIAMRoleAdmins:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Path: /
      Policies:
        - PolicyName: VinylStoreCognitoIAMRoleAdminsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:us-east-1:*:${VinylStoreAPIGatewayRESTAPI}/${EnvironmentName}/*/*
      Description: IAM Role Policy to give the Vinyl Store application admin users permissions to access all the API GATEWAY Methods of the Vinyls Resource
      RoleName: VinylStoreCognitoIAMRoleAdmins
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCognitoIAMRoleClients:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Path: /
      Policies:
        - PolicyName: VinylStoreCognitoIAMRoleClientsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:us-east-1:*:${VinylStoreAPIGatewayRESTAPI}/${EnvironmentName}/GET/*
      Description: IAM Role Policy to give the Vinyl Store application client users permissions to access  the API Gateway GET Method of the Vinyls Resource
      RoleName: VinylStoreCognitoIAMRoleClients
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCognitoUserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Cognito User Pool Group which contains the users of the Vinyl Store application with admin privileges
      GroupName: VinylStoreCognitoUserPoolGroupAdmins
      UserPoolId: !Ref VinylStoreCognitoUserPool
      RoleArn: !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
  VinylStoreCognitoUserPoolGroupClients:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Cognito User Pool Group which contains the users of the Vinyl Store application with client privileges
      GroupName: VinylStoreCognitoUserPoolGroupClients
      UserPoolId: !Ref VinylStoreCognitoUserPool
      RoleArn: !GetAtt VinylStoreCognitoIAMRoleClients.Arn
  VinylStoreCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref VinylStoreCognitoUserPoolClient
          ProviderName: !GetAtt VinylStoreCognitoUserPool.ProviderName
      IdentityPoolName: VinylStoreCognitoIdentityPool
  VinylStoreCognitoIdentityPoolUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
  VinylStoreCognitoIdentityPoolAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref VinylStoreCognitoIdentityPool
      Roles:
        authenticated: !GetAtt VinylStoreCognitoIdentityPoolAuthorizedRole.Arn
        unauthenticated: !GetAtt VinylStoreCognitoIdentityPoolUnAuthorizedRole.Arn
      RoleMappings:
        "VinylStoreCognitoUserPool":
          IdentityProvider: !Ref VinylStoreCognitoUserPool
          AmbiguousRoleResolution: Deny
          Type: Token

#PARAMETERS
Parameters:
  MyAWSRoleARN:
    Type: String
  DeploymentRoleSecretAccessKeyId:
    Type: String
  DeploymentRoleAccessKeyId:
    Type: String
  UsernameTag:
    Type: String
  APIGatewayResourceVinylsPathPart:
    Type: String
  APIGatewayResourcePresignedURLSPathPart:
    Type: String
  LambdaFuncUPDATEVinylsName:
    Type: String
  LambdaFuncDELETEVinylsName:
    Type: String
  LambdaFuncGETVinylsName:
    Type: String
  LambdaFuncPOSTVinylsName:
    Type: String
  LambdaFuncGETPresignedURLSName:
    Type: String
  DynamoDBTableName:
    Type: String
  APIName:
    Type: String
  EnvironmentName:
    Type: String
  VinylStoreCloudFrontS3BucketName:
    Type: String
  VinylStoreLambdaGETVinylsScriptName:
    Type: String
  VinylStoreLambdaPOSTVinylsScriptName:
    Type: String
  VinylStoreLambdaDELETEVinylsScriptName:
    Type: String
  VinylStoreLambdaUPDATEVinylsScriptName:
    Type: String
  VinylStoreLambdaGETPresignedURLSScriptName:
    Type: String
  VinylStoreS3BucketImagesName:
    Type: String
  VinylStoreCognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
Outputs:
  VinylStoreCognitoUserPoolID:
    Value: !Ref VinylStoreCognitoUserPool
    Description: Vinyl Store Cognito UserPool ID
  VinylStoreCognitoPoolClientID:
    Value: !Ref VinylStoreCognitoUserPoolClient
    Description: Vinyl Store Cognito UserPoolClient ID
  HostedUIURL:
    Value: !Sub https://${VinylStoreCognitoDomain}.auth.us-east-1.amazoncognito.com/login?client_id=${VinylStoreCognitoUserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:4200/home
    Description: Vinyl Store Cognito hosted UI URL
  IdentityPoolID:
    Value: !Ref VinylStoreCognitoIdentityPool
    Description: Vinyl Store Cognito Identity Pool ID
