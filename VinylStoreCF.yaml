AWSTemplateFormatVersion: '2010-09-09'
Description: Vinyl Store Application Stack deployed with Azure Devops Pipelines
Resources:
  VinylStoreLambdaGET:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: 
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","let body;","let statusCode = 200;","const headers = {","'Content-Type': 'application/json'","};","try {","body = await dynamo.get({","TableName: TABLE_NAME,","Key: {","id: event.queryStringParameters.id","}","}).promise();","} catch (err) {","statusCode = 400;","body = err.message;","} finally {","body = JSON.stringify(body);","}","return {","statusCode,","body,","headers","};","};"] ]
      FunctionName: 
        !Ref LambdaFuncGETName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdaGET.Arn
      Description: Lambda function created to handle the GET requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaGETALL:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: 
          Fn::Join: [ "", ["const AWS = require('aws-sdk');", "const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","  let body;","  let statusCode = 200;","  const headers = {","'Content-Type': 'application/json'","};","try {","body = await dynamo.scan({ TableName: TABLE_NAME }).promise();","} catch (err) {","statusCode = 400;","body = err.message;","} finally {","body = JSON.stringify(body);","}","return {","statusCode,","body,","headers","};","};"] ]
      FunctionName: 
        !Ref LambdaFuncGETALLName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdaGETALL.Arn
      Description: Lambda function created to handle the GET ALL requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaUPDATE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');", "const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","  let body;","  let statusCode = 200;","  const headers = {","    'Content-Type': 'application/json'","  };","  try {","    let requestJSON = JSON.parse(event.body);","    body = await dynamo.update({","        TableName: TABLE_NAME,","        Key:{","id: event.pathParameters.id","},","UpdateExpression: 'set name=:newName, artist=:newArtist, genre=:newGenre, year=:newYear',","ExpressionAttributeValues:{","':newName':requestJSON.name,","':newArtist':requestJSON.artist,","':newGenre':requestJSON.genre,","':newYear':requestJSON.year","':newYear':requestJSON.year","ReturnValues:'UPDATED_NEW'","}).promise();","body = `UPDATE Vinyl ${requestJSON.id}`;","} catch (err) {","statusCode = 400;","body = err.message;","} finally {","body = JSON.stringify(body);}","return {statusCode,body,headers};};"] ]
      FunctionName: 
        !Ref LambdaFuncUPDATEName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdaUPDATE.Arn
      Description: Lambda function created to handle the UPDATE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaPOST:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","};"] ]
      FunctionName: 
        !Ref LambdaFuncPOSTName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdaPOST.Arn
      Description: Lambda function created to handle the POST requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaDELETE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","};"] ]
      FunctionName: 
        !Ref LambdaFuncDELETEName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdaDELETE.Arn
      Description: Lambda function created to handle the DELETE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: 
      - VinylStoreRoleLambdaGET
      - VinylStoreRoleLambdaGETALL
      - VinylStoreRoleLambdaPOST
      - VinylStoreRoleLambdaUPDATE
      - VinylStoreRoleLambdaDELETE
  VinylStoreAPIGatewayRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API to handle the Vinyl Store Application requests
      Name: 
        Ref: APIName
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
    DependsOn: 
      - VinylStoreLambdaGET
      - VinylStoreLambdaGETALL
      - VinylStoreLambdaUPDATE
      - VinylStoreLambdaPOST
      - VinylStoreLambdaDELETE
  VinylStoreAPIGatewayResourceVinyls:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ParentId: !GetAtt 'VinylStoreAPIGatewayRESTAPI.RootResourceId'
      PathPart: !Ref 'APIGatewayResourceVinylsPathPart'
  VinylStoreAPIGatewayMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGET.Arn}/invocations'
  VinylStoreAPIGatewayMethodGETALL:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGETALL.Arn}/invocations'
  VinylStoreAPIGatewayMethodUPDATE:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: PUT
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaUPDATE.Arn}/invocations'
  VinylStoreAPIGatewayMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaPOST.Arn}/invocations'
  VinylStoreAPIGatewayMethodDELETE:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: DELETE
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaDELETE.Arn}/invocations'
  VinylStoreAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Deployment for the Frontend to connect to the API Gateway
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      StageName: !Ref 'EnvironmentName'
    DependsOn: 
      - VinylStoreAPIGatewayMethodGET
      - VinylStoreAPIGatewayMethodGETALL
      - VinylStoreAPIGatewayMethodUPDATE
      - VinylStoreAPIGatewayMethodPOST
      - VinylStoreAPIGatewayMethodDELETE
  VinylStoreLambdaGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaGET.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaGETALLPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaGETALL.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaUPDATEPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaUPDATE.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaPOSTPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaPOST.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaDELETEPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaDELETE.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreRoleLambdaGET:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to the Lambda dedicated to get one individual Vinyl from the DynamoDB Table
      Policies:
        - PolicyName: VinylStoreRoleLambdaGETPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: '*'
      RoleName: VinylStoreRoleLambdaGET
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
  VinylStoreRoleLambdaGETALL:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to the Lambda dedicated to get all the Vinyls from the DynamoDB Table
      Policies:
        - PolicyName: VinylStoreRoleLambdaGETALLPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: '*'
      RoleName: VinylStoreRoleLambdaGETALL
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
  VinylStoreRoleLambdaUPDATE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to the Lambda dedicated to update a Vinyl from the DynamoDB Table
      Policies:
        - PolicyName: VinylStoreRoleLambdaUPDATEPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: '*'
      RoleName: VinylStoreRoleLambdaUPDATE
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
  VinylStoreRoleLambdaPOST:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to the Lambda dedicated to POST a Vinyl from the DynamoDB Table
      Policies:
        - PolicyName: VinylStoreRoleLambdaPOSTPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: '*'
      RoleName: VinylStoreRoleLambdaPOST
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
  VinylStoreRoleLambdaDELETE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to the Lambda dedicated to DELETE a Vinyl from the DynamoDB Table
      Policies:
        - PolicyName: VinylStoreRoleLambdaDELETEPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeInstances
                  - ec2:AttachNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource: '*'
      RoleName: VinylStoreRoleLambdaDELETE
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
  VinylStoreMicroservicesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        !Ref MicroservicesS3BucketName
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: user
          Value: plata.marquez.alvaro
Parameters:
  APIGatewayResourceVinylsPathPart:
    Type: String
    Default: vinyls
  LambdaFuncUPDATEName:
    Type: String
    Default: VinylStoreLambdaUPDATE
  LambdaFuncDELETEName:
    Type: String
    Default: VinylStoreLambdaDELETE
  LambdaFuncGETName:
    Type: String
    Default: VinylStoreLambdaGET
  LambdaFuncGETALLName:
    Type: String
    Default: VinylStoreLambdaGETALL
  LambdaFuncPOSTName:
    Type: String
    Default: VinylStoreLambdaPOST
  DynamoDBTableName:
    Type: String
    Default: VinylStoreDynamoDBTable
  APIName:
    Type: String
    Default: VinylStoreAPI
  EnvironmentName:
    Type: String
    Default: Prod
  MicroservicesS3BucketName:
    Type: String
    Default: vinylstore-microservices-bucket
  DELETEMicroserviceS3BucketKey:
    Type: String
    Default: DELETE_Vinyl_Service/delete_vinyl_service
