AWSTemplateFormatVersion: '2010-09-09'
Description: Vinyl Store Application Stack deployed with Azure Devops Pipelines
Resources:
  VinylStoreLambdaGET:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","};"] ]
      FunctionName: 
        !Ref LambdaFuncGETName
      Handler: !Sub ${VinylStoreLambdaGETScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the GET requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaUPDATE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","};"] ]
      FunctionName: 
        !Ref LambdaFuncUPDATEName
      Handler: !Sub ${VinylStoreLambdaUPDATEScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the UPDATE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaPOST:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","};"] ]
      FunctionName: 
        !Ref LambdaFuncPOSTName
      Handler: !Sub ${VinylStoreLambdaPOSTScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the POST requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreLambdaDELETE:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join: [ "", ["const AWS = require('aws-sdk');","const dynamo = new AWS.DynamoDB.DocumentClient();","const TABLE_NAME = process.env.VINYLS_TABLE;","exports.handler = async (event, context) => {","};"] ]
      FunctionName: 
        !Ref LambdaFuncDELETEName
      Handler: !Sub ${VinylStoreLambdaDELETEScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the DELETE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE:
            Ref: DynamoDBTableName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTable
  VinylStoreDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreAPIGatewayRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API to handle the Vinyl Store Application requests
      Name: 
        Ref: APIName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: 
      - VinylStoreLambdaGET
      - VinylStoreLambdaUPDATE
      - VinylStoreLambdaPOST
      - VinylStoreLambdaDELETE
  VinylStoreAPIGatewayResourceVinyls:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ParentId: !GetAtt 'VinylStoreAPIGatewayRESTAPI.RootResourceId'
      PathPart: !Ref 'APIGatewayResourceVinylsPathPart'
  VinylStoreAPIGatewayMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGET.Arn}/invocations'
  VinylStoreAPIGatewayMethodUPDATE:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: PUT
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaUPDATE.Arn}/invocations'
  VinylStoreAPIGatewayMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaPOST.Arn}/invocations'
  VinylStoreAPIGatewayMethodDELETE:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      ResourceId: !Ref 'VinylStoreAPIGatewayResourceVinyls'
      HttpMethod: DELETE
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: '200'
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaDELETE.Arn}/invocations'
  VinylStoreAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Deployment for the Frontend to connect to the API Gateway
      RestApiId: !Ref 'VinylStoreAPIGatewayRESTAPI'
      StageName: !Ref 'EnvironmentName'
    DependsOn: 
      - VinylStoreAPIGatewayMethodGET
      - VinylStoreAPIGatewayMethodUPDATE
      - VinylStoreAPIGatewayMethodPOST
      - VinylStoreAPIGatewayMethodDELETE
  VinylStoreLambdaGETPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaGET.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaUPDATEPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaUPDATE.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaPOSTPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaPOST.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaDELETEPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'VinylStoreLambdaDELETE.Arn'
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreRoleLambdas:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to all the lambda functions and control their interaction with dynamoDB
      Policies:
        - PolicyName: VinylStoreRoleLambdasPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt VinylStoreDynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
      RoleName: VinylStoreRoleLambdas
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCloudFrontS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref VinylStoreCloudFrontS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Origin Access Identity to get the objects from the Vinyl Store CloudFront Bucket'
  VinylStoreCloudFrontS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VinylStoreCloudFrontS3BucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Sid: AccessObjectsOnlyThroughASpecificCloudFrontDistribution
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${VinylStoreCloudFrontOriginIdentity}'
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${VinylStoreCloudFrontS3BucketName}/*
  VinylStoreCloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31535999
        MinTTL: 72000
        Name: VinylStoreCacheBasic 
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all
  VinylStorePublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /dist/proyecto-inicial-frontend-productos/index.html
            ErrorCachingMinTTL: 300
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !Sub ${VinylStoreCloudFrontS3BucketName}.s3.us-east-1.amazonaws.com
            Id: !Sub S3-${VinylStoreCloudFrontS3BucketName}
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${VinylStoreCloudFrontOriginIdentity}'
        Enabled: true
        Comment: CloudFront distribution dedicated to deploy the Frontend files for the Vinyl Store application
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: !Ref VinylStoreCloudFrontCachePolicy
          TargetOriginId: !Sub S3-${VinylStoreCloudFrontS3BucketName}
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: dist/vinyl-store/index.html
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${VinylStoreCognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
  VinylStoreCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      CallbackURLs:
        - http://localhost:4200/home
      UserPoolId: !Ref VinylStoreCognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
  VinylStoreCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref VinylStoreCognitoDomain
      UserPoolId: !Ref VinylStoreCognitoUserPool
  VinylStoreCognitoIdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${VinylStoreCognitoDomain}IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: 
        - ClientId: !Ref VinylStoreCognitoUserPoolClient
          ProviderName: !GetAtt VinylStoreCognitoUserPool.ProviderName
Parameters:
  UsernameTag:
    Type: String
  APIGatewayResourceVinylsPathPart:
    Type: String
  LambdaFuncUPDATEName:
    Type: String
  LambdaFuncDELETEName:
    Type: String
  LambdaFuncGETName:
    Type: String
  LambdaFuncPOSTName:
    Type: String
  DynamoDBTableName:
    Type: String
  APIName:
    Type: String
  EnvironmentName:
    Type: String
  VinylStoreCloudFrontS3BucketName:
    Type: String
  VinylStoreLambdaGETScriptName:
    Type: String
  VinylStoreLambdaPOSTScriptName:
    Type: String
  VinylStoreLambdaDELETEScriptName:
    Type: String
  VinylStoreLambdaUPDATEScriptName:
    Type: String
  VinylStoreCognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
Outputs:
  VinylStoreCognitoUserPoolID:
    Value: !Ref VinylStoreCognitoUserPool
    Description: Vinyl Store Cognito UserPool ID
  VinylStoreCognitoPoolClientID:
    Value: !Ref VinylStoreCognitoUserPoolClient
    Description: Vinyl Store Cognito UserPoolClient ID
  VinylStoreCognitoIdentityPoolId:
    Value: !Ref VinylStoreCognitoIdentityPool
    Description: Vinyl Store Cognito IdentityPool ID
  HostedUIURL:
    Value: !Sub https://${VinylStoreCognitoDomain}.auth.us-east-1.amazoncognito.com/login?client_id=${VinylStoreCognitoUserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:4200/home
    Description: Vinyl Store Cognito hosted UI URL