AWSTemplateFormatVersion: "2010-09-09"
Description: Vinyl Store Application Stack deployed with Azure Devops Pipelines
Resources:
  #LAMBDA FUNCTIONS - AUTHORIZERS
  VinylStoreLambdaAuthorizerAdmins:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      Description: Lambda Authorizer for Admin users
      FunctionName: VinylStoreLambdaFunctionAuthorizerAdmins
      Handler: authorizer_admins.handler
      PackageType: Zip
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Runtime: nodejs12.x
      Layers:
        - !Ref VinylStoreLambdaLayerAuthorizers
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreLambdaAuthorizerClients:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      Description: Lambda Authorizer for Client users
      FunctionName: VinylStoreLambdaFunctionAuthorizerClients
      Handler: authorizer_clients.handler
      PackageType: Zip
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Runtime: nodejs12.x
      Layers:
        - !Ref VinylStoreLambdaLayerAuthorizers
      Tags:
        - Key: user
          Value: !Ref UsernameTag

  #LAMBDA PERMISSIONS - AUTHORIZERS
  VinylStoreLambdaAuthorizerAdminsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaAuthorizerAdmins.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaAuthorizerClientsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaAuthorizerClients.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment

  #LAMBDA FUNCTIONS - CRUD - VINYLS
  VinylStoreLambdaGETVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncGETVinylsName
      Handler: !Sub ${VinylStoreLambdaGETVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the GET requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE: VinylStoreDynamoDBTableVinyls
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableVinyls
  VinylStoreLambdaUPDATEVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncUPDATEVinylsName
      Handler: !Sub ${VinylStoreLambdaUPDATEVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the UPDATE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE: VinylStoreDynamoDBTableVinyls
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableVinyls
  VinylStoreLambdaPOSTVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncPOSTVinylsName
      Handler: !Sub ${VinylStoreLambdaPOSTVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the POST requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE: VinylStoreDynamoDBTableVinyls
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableVinyls
  VinylStoreLambdaDELETEVinyls:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncDELETEVinylsName
      Handler: !Sub ${VinylStoreLambdaDELETEVinylsScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the DELETE requests of the Vinyl Store application
      Environment:
        Variables:
          VINYLS_TABLE: VinylStoreDynamoDBTableVinyls
          DELETE_SHOPPING_CART_LAMBDA_FUNCTION_NAME: VinylStoreLambdaFunctionDELETEShoppingCarts
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableVinyls

  #LAMBDA PERMISSIONS - VINYLS
  VinylStoreLambdaGETVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaGETVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaUPDATEVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaUPDATEVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaPOSTVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaPOSTVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaDELETEVinylsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaDELETEVinyls.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment

  #LAMBDA FUNCTIONS - PRESIGNED URLS
  VinylStoreLambdaGETPresignedURLs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: !Ref LambdaFuncGETPresignedURLSName
      Handler: !Sub ${VinylStoreLambdaGETPresignedURLSScriptName}.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to create presigned urls to upload images to s3 bucket
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: VinylStoreS3BucketImagesName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreS3BucketImages

  #LAMBDA PERMISSIONS - PRESIGNED URLS
  VinylStoreLambdaGETPresignedURLsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaGETPresignedURLs.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment

  #LAMBDA FUNCTIONS - SHOPPING CARTS
  VinylStoreLambdaGETShoppingCarts:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: VinylStoreLambdaFunctionGETShoppingCarts
      Handler: get_shopping_cart_service.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the GET requests of the Vinyl Store application for Shopping Cart Items
      Environment:
        Variables:
          SHOPPING_CART_TABLE_NAME: VinylStoreDynamoDBTableShoppingCart
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableShoppingCart
  VinylStoreLambdaUPDATEShoppingCarts:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: VinylStoreLambdaFunctionUPDATEShoppingCarts
      Handler: update_shopping_cart_service.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the UPDATE requests of the Vinyl Store application for Shopping Cart Items
      Environment:
        Variables:
          SHOPPING_CART_TABLE_NAME: VinylStoreDynamoDBTableShoppingCart
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableShoppingCart
  VinylStoreLambdaPOSTShoppingCarts:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: VinylStoreLambdaFunctionPOSTShoppingCarts
      Handler: post_shopping_cart_service.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the POST requests of the Vinyl Store application for Shopping Cart Items
      Environment:
        Variables:
          SHOPPING_CART_TABLE_NAME: VinylStoreDynamoDBTableShoppingCart
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableShoppingCart
  VinylStoreLambdaDELETEShoppingCarts:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            [
              "",
              [
                "const AWS = require('aws-sdk');",
                "const dynamo = new AWS.DynamoDB.DocumentClient();",
                "const TABLE_NAME = process.env.VINYLS_TABLE;",
                "exports.handler = async (event, context) => {",
                "};",
              ],
            ]
      FunctionName: VinylStoreLambdaFunctionDELETEShoppingCarts
      Handler: delete_shopping_cart_service.handler
      Runtime: nodejs12.x
      Role: !GetAtt VinylStoreRoleLambdas.Arn
      Description: Lambda function created to handle the DELETE requests of the Vinyl Store application for Shopping Cart Items
      Environment:
        Variables:
          SHOPPING_CART_TABLE_NAME: VinylStoreDynamoDBTableShoppingCart
          GET_VINYLS_LAMBDA_FUNCTION_NAME: !Ref LambdaFuncGETVinylsName
          UPDATE_VINYLS_LAMBDA_FUNCTION_NAME: !Ref LambdaFuncUPDATEVinylsName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn: VinylStoreDynamoDBTableShoppingCart

  #LAMBDA PERMISSIONS - SHOPPING CARTS
  VinylStoreLambdaGETShoppingCartsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaGETShoppingCarts.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaUPDATEShoppingCartsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaUPDATEShoppingCarts.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaPOSTShoppingCartsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaPOSTShoppingCarts.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment
  VinylStoreLambdaDELETEShoppingCartsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "VinylStoreLambdaDELETEShoppingCarts.Arn"
      Principal: apigateway.amazonaws.com
    DependsOn: VinylStoreAPIGatewayDeployment

  #LAMBDA LAYERS - AUTHORIZERS
  VinylStoreLambdaLayerAuthorizers:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      Content:
        S3Bucket: !Ref VinylStoreS3BucketLambdaLayers
        S3Key: authorizers/nodejs.zip
      Description: Lambda Layer containing the modules needed in Lambda Authorizer Functions
      LayerName: VinylStoreLambdaLayerAuthorizers

  #LAMBDA ROLE
  VinylStoreRoleLambdas:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Description: Role to assign to all the lambda functions and control their interaction with dynamoDB and the S3 Bucket that contains the images
      Policies:
        - PolicyName: VinylStoreRoleLambdasPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource: !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:function:*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: 
                  - !GetAtt VinylStoreDynamoDBTableVinyls.Arn
                  - !GetAtt VinylStoreDynamoDBTableShoppingCart.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                  - s3:ListObjects
                Resource: !GetAtt VinylStoreS3BucketImages.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListObjects
                Resource: !GetAtt VinylStoreS3BucketLambdaLayers.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: 
                  - "kms:DescribeCustomKeyStores"
                  - "kms:ListKeys"
                  - "kms:ListAliases"
                  - "kms:*"
                Resource: !GetAtt VinylStoreS3BucketImagesKMSkey.Arn
      RoleName: VinylStoreRoleLambdas
      Tags:
        - Key: user
          Value: !Ref UsernameTag

  #DYNAMODB TABLES
  VinylStoreDynamoDBTableVinyls:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VinylStoreDynamoDBTableVinyls
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreDynamoDBTableShoppingCart:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: VinylStoreDynamoDBTableShoppingCart
      AttributeDefinitions:
        - AttributeName: client_id
          AttributeType: S
        - AttributeName: vinyl_id
          AttributeType: S
      KeySchema:
        - AttributeName: client_id
          KeyType: HASH
        - AttributeName: vinyl_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: user
          Value: !Ref UsernameTag

  #API GATEWAY - GENERAL RESOURCES
  VinylStoreAPIGatewayRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: REST API to handle the Vinyl Store Application requests
      Name:
        Ref: APIName
      # Policy:
      #   Version: "2012-10-17"
      #   Statement:
      #     - Effect: Allow
      #       Principal:
      #         AWS:
      #           - !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
      #       Action:
      #         - execute-api:Invoke
      #       Resource: !Sub execute-api:/${EnvironmentName}/*/*
      #     - Effect: Allow
      #       Principal:
      #         AWS:
      #           - !GetAtt VinylStoreCognitoIAMRoleClients.Arn
      #       Action:
      #         - execute-api:Invoke
      #       Resource: !Sub execute-api:/${EnvironmentName}/GET/*
      #     - Effect: Allow
      #       Principal:
      #         AWS:
      #           - "*"
      #       Action:
      #         - execute-api:Invoke
      #       Resource: !Sub execute-api:/${EnvironmentName}/OPTIONS/*
      Tags:
        - Key: user
          Value: !Ref UsernameTag
    DependsOn:
      - VinylStoreLambdaGETVinyls
      - VinylStoreLambdaUPDATEVinyls
      - VinylStoreLambdaPOSTVinyls
      - VinylStoreLambdaDELETEVinyls
      - VinylStoreLambdaGETPresignedURLs
      - VinylStoreLambdaGETShoppingCarts
      - VinylStoreLambdaUPDATEShoppingCarts
      - VinylStoreLambdaPOSTShoppingCarts
      - VinylStoreLambdaDELETEShoppingCarts
  VinylStoreAPIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Deployment for the Frontend to connect to the API Gateway
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      #StageName: !Ref "EnvironmentName"
    DependsOn:
      - VinylStoreAPIGatewayMethodGETVinyls
      - VinylStoreAPIGatewayMethodUPDATEVinyls
      - VinylStoreAPIGatewayMethodPOSTVinyls
      - VinylStoreAPIGatewayMethodDELETEVinyls
      - VinylStoreAPIGatewayMethodOPTIONSVinyls
      - VinylStoreAPIGatewayMethodOPTIONSPresignedURLS
      - VinylStoreAPIGatewayMethodGETPresignedURLS
      - VinylStoreAPIGatewayMethodGETShoppingCarts
      - VinylStoreAPIGatewayMethodPOSTShoppingCarts
      - VinylStoreAPIGatewayMethodUPDATEShoppingCarts
      - VinylStoreAPIGatewayMethodDELETEShoppingCarts
      - VinylStoreAPIGatewayMethodOPTIONSShoppingCarts
  VinylStoreAPIGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref VinylStoreAPIGatewayDeployment
      Description: Deployment Stage for the Frontend to connect to the API Gateway
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: "INFO"
          MetricsEnabled: true
          ResourcePath: "/*"
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      StageName: !Ref EnvironmentName
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreAPIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt
        - VinylStoreAPIGatewayCloudWatchLogsIAMRole
        - Arn
  VinylStoreAPIGatewayCloudWatchLogsIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  # VinylStoreWEBACLAssociationAPIGatewayWAF:
  #   Type: "AWS::WAFRegional::WebACLAssociation"
  #   Properties:
  #     ResourceArn: !Sub 
  #       - arn:aws:apigateway:us-east-1::/restapis/${api}/stages/${EnvironmentName}
  #       - api: !Ref VinylStoreAPIGatewayRESTAPI
  #     WebACLId: !Ref VinylStoreWAFRegionalOwaspACL

  #API GATEWAY - AUTHORIZER RESOURCES
  VinylStoreAPIGatewayAuthorizerAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: VinylStoreAPIGatewayAuthorizerAdminRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt VinylStoreLambdaAuthorizerAdmins.Arn
      RoleName: VinylStoreAPIGatewayAuthorizerAdminRole
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreAPIGatewayAuthorizerAdmin:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${VinylStoreLambdaAuthorizerAdmins.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: VinylStoreAPIGatewayAuthorizerAdmin
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Type: TOKEN
      AuthorizerCredentials: !GetAtt VinylStoreAPIGatewayAuthorizerAdminRole.Arn
  VinylStoreAPIGatewayAuthorizerClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: VinylStoreAPIGatewayAuthorizerClientRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: !GetAtt VinylStoreLambdaAuthorizerClients.Arn
      RoleName: VinylStoreAPIGatewayAuthorizerClientRole
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreAPIGatewayAuthorizerClient:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerUri: !Sub "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${VinylStoreLambdaAuthorizerClients.Arn}/invocations"
      IdentitySource: method.request.header.Authorization
      Name: VinylStoreAPIGatewayAuthorizerClient
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Type: TOKEN
      AuthorizerCredentials: !GetAtt VinylStoreAPIGatewayAuthorizerClientRole.Arn

  #API Gateway - VINYLS RESOURCES
  VinylStoreAPIGatewayResourceVinyls:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ParentId: !GetAtt "VinylStoreAPIGatewayRESTAPI.RootResourceId"
      PathPart: !Ref "APIGatewayResourceVinylsPathPart"
  VinylStoreAPIGatewayMethodGETVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerClient
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: GET
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGETVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodUPDATEVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerAdmin
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: PUT
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaUPDATEVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodPOSTVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerAdmin
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: POST
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaPOSTVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodDELETEVinyls:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerAdmin
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceVinyls"
      HttpMethod: DELETE
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaDELETEVinyls.Arn}/invocations"
  VinylStoreAPIGatewayMethodOPTIONSVinyls:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      OperationName: VinylsOptions
      ResourceId: !Ref VinylStoreAPIGatewayResourceVinyls
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  #API Gateway - PRESIGNED URLS RESOURCES
  VinylStoreAPIGatewayResourcePresignedURLS:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ParentId: !GetAtt "VinylStoreAPIGatewayRESTAPI.RootResourceId"
      PathPart: !Ref "APIGatewayResourcePresignedURLSPathPart"
  VinylStoreAPIGatewayMethodGETPresignedURLS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerAdmin
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourcePresignedURLS"
      HttpMethod: GET
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGETPresignedURLs.Arn}/invocations"
  VinylStoreAPIGatewayMethodOPTIONSPresignedURLS:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      OperationName: PresignedURLsOptions
      ResourceId: !Ref VinylStoreAPIGatewayResourcePresignedURLS
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  #API Gateway - SHOPPING CARTS RESOURCES
  VinylStoreAPIGatewayResourceShoppingCarts:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ParentId: !GetAtt "VinylStoreAPIGatewayRESTAPI.RootResourceId"
      PathPart: shopping-carts
  VinylStoreAPIGatewayMethodGETShoppingCarts:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerClient
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceShoppingCarts"
      HttpMethod: GET
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaGETShoppingCarts.Arn}/invocations"
  VinylStoreAPIGatewayMethodUPDATEShoppingCarts:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerClient
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceShoppingCarts"
      HttpMethod: PUT
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaUPDATEShoppingCarts.Arn}/invocations"
  VinylStoreAPIGatewayMethodPOSTShoppingCarts:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerClient
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceShoppingCarts"
      HttpMethod: POST
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaPOSTShoppingCarts.Arn}/invocations"
  VinylStoreAPIGatewayMethodDELETEShoppingCarts:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref VinylStoreAPIGatewayAuthorizerClient
      RestApiId: !Ref "VinylStoreAPIGatewayRESTAPI"
      ResourceId: !Ref "VinylStoreAPIGatewayResourceShoppingCarts"
      HttpMethod: DELETE
      MethodResponses:
        - StatusCode: "200"
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: "200"
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VinylStoreLambdaDELETEShoppingCarts.Arn}/invocations"
  VinylStoreAPIGatewayMethodOPTIONSShoppingCarts:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      OperationName: ShoppingCartsOptions
      ResourceId: !Ref VinylStoreAPIGatewayResourceShoppingCarts
      RestApiId: !Ref VinylStoreAPIGatewayRESTAPI
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  #S3 BUCKET - IMAGES
  VinylStoreS3BucketImages:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref VinylStoreS3BucketImagesName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            Id: VinylStoreS3BucketImagesCORSRule
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            KMSMasterKeyID: !GetAtt VinylStoreS3BucketImagesKMSkey.Arn
            SSEAlgorithm: 'aws:kms'
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreS3BucketImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VinylStoreS3BucketImagesName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt VinylStoreCognitoIAMRoleClients.Arn
                - !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
            Action:
              - s3:Get*
              - s3:List*
            Resource: !Sub arn:aws:s3:::${VinylStoreS3BucketImagesName}/*
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
                - !GetAtt VinylStoreRoleLambdas.Arn
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub arn:aws:s3:::${VinylStoreS3BucketImagesName}/*
  VinylStoreS3BucketImagesKMSkey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-s3
        Statement:
          - Sid: Permisos para IAM USER
            Action: 'kms:*'
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Resource: '*'  

  #S3 BUCKET - LAMBDA LAYERS
  VinylStoreS3BucketLambdaLayers:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: vinylstore-s3-bucket-layers
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            Id: VinylStoreS3BucketLambdaLayersCORSRule
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreS3BucketLambdaLayersBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: vinylstore-s3-bucket-layers
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Sid: PrivateAccessGet
            Principal:
              AWS:
                - !GetAtt VinylStoreRoleLambdas.Arn
            Action: 
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::vinylstore-s3-bucket-layers/*

  #CLOUDFRONT RESOURCES
  VinylStoreCloudFrontS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref VinylStoreCloudFrontS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Origin Access Identity to get the objects from the Vinyl Store CloudFront Bucket"
  VinylStoreCloudFrontS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VinylStoreCloudFrontS3BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Sid: AccessObjectsOnlyThroughASpecificCloudFrontDistribution
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${VinylStoreCloudFrontOriginIdentity}"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${VinylStoreCloudFrontS3BucketName}/*
  VinylStoreCloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31535999
        MinTTL: 72000
        Name: VinylStoreCacheBasic
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all
  VinylStorePublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !Sub ${VinylStoreCloudFrontS3BucketName}.s3.us-east-1.amazonaws.com
            Id: !Sub S3-${VinylStoreCloudFrontS3BucketName}
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${VinylStoreCloudFrontOriginIdentity}"
        Enabled: true
        Comment: CloudFront distribution dedicated to deploy the Frontend files for the Vinyl Store application
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: !Ref VinylStoreCloudFrontCachePolicy
          TargetOriginId: !Sub S3-${VinylStoreCloudFrontS3BucketName}
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: /index.html
        # WebACLId: !Ref VinylStoreWAFGlobalOwaspACL
      Tags:
        - Key: user
          Value: !Ref UsernameTag

  #COGNITO RESOURCES
  VinylStoreCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${VinylStoreCognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
  VinylStoreCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      CallbackURLs:
        - http://localhost:4200/home
      UserPoolId: !Ref VinylStoreCognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
  VinylStoreCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref VinylStoreCognitoDomain
      UserPoolId: !Ref VinylStoreCognitoUserPool
  VinylStoreCognitoIAMRoleAdmins:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Description: IAM Role to give the Vinyl Store application admin users permissions to access all the API GATEWAY Methods of the Vinyls Resource
      RoleName: VinylStoreCognitoIAMRoleAdmins
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCognitoIAMRoleClients:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Description: IAM Role to give the Vinyl Store application client users permissions to access  the API Gateway GET Method of the Vinyls Resource
      RoleName: VinylStoreCognitoIAMRoleClients
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreCognitoIAMRoleAdminsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - execute-api:Invoke
            Resource: 
              - !Sub arn:aws:execute-api:us-east-1:${AWS::AccountId}:${VinylStoreAPIGatewayRESTAPI}/${EnvironmentName}/*/*
          - Effect: Allow
            Action: 
              - "kms:DescribeCustomKeyStores"
              - "kms:ListKeys"
              - "kms:ListAliases"
              - "kms:*"
            Resource: !GetAtt VinylStoreS3BucketImagesKMSkey.Arn
      PolicyName: VinylStoreCognitoIAMRoleAdminsPolicy
      Roles:
        - !Ref VinylStoreCognitoIAMRoleAdmins
  VinylStoreCognitoIAMRoleClientsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - execute-api:Invoke
            Resource: 
              - !Sub arn:aws:execute-api:us-east-1:${AWS::AccountId}:${VinylStoreAPIGatewayRESTAPI}/${EnvironmentName}/GET/Vinyls
              - !Sub arn:aws:execute-api:us-east-1:${AWS::AccountId}:${VinylStoreAPIGatewayRESTAPI}/${EnvironmentName}/*/ShoppingCarts
            - Effect: Allow
            Action: 
              - "kms:DescribeCustomKeyStores"
              - "kms:ListKeys"
              - "kms:ListAliases"
              - "kms:*"
            Resource: !GetAtt VinylStoreS3BucketImagesKMSkey.Arn
      PolicyName: VinylStoreCognitoIAMRoleClientsPolicy
      Roles:
        - !Ref VinylStoreCognitoIAMRoleClients
  VinylStoreCognitoUserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Cognito User Pool Group which contains the users of the Vinyl Store application with admin privileges
      GroupName: VinylStoreCognitoUserPoolGroupAdmins
      UserPoolId: !Ref VinylStoreCognitoUserPool
      Precedence: 0
      RoleArn: !GetAtt VinylStoreCognitoIAMRoleAdmins.Arn
  VinylStoreCognitoUserPoolGroupClients:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Cognito User Pool Group which contains the users of the Vinyl Store application with client privileges
      GroupName: VinylStoreCognitoUserPoolGroupClients
      UserPoolId: !Ref VinylStoreCognitoUserPool
      Precedence: 1
      RoleArn: !GetAtt VinylStoreCognitoIAMRoleClients.Arn
  VinylStoreCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref VinylStoreCognitoUserPoolClient
          ProviderName: !GetAtt VinylStoreCognitoUserPool.ProviderName
      IdentityPoolName: VinylStoreCognitoIdentityPool
  VinylStoreCognitoIdentityPoolUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
  VinylStoreCognitoIdentityPoolAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref VinylStoreCognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
      Tags:
        - Key: user
          Value: !Ref UsernameTag
  VinylStoreIdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref VinylStoreCognitoIdentityPool
      Roles:
        authenticated: !GetAtt VinylStoreCognitoIdentityPoolAuthorizedRole.Arn
        unauthenticated: !GetAtt VinylStoreCognitoIdentityPoolUnAuthorizedRole.Arn
      RoleMappings:
        "VinylStoreCognitoRoleMapping":
          IdentityProvider: !Sub cognito-idp.us-east-1.amazonaws.com/${VinylStoreCognitoUserPool}:${VinylStoreCognitoUserPoolClient}
          AmbiguousRoleResolution: Deny
          Type: Token

  # #WAF
  # ## 1.
  # ## OWASP Top 10 A1
  # ## Mitigate SQL Injection Attacks
  # ## Matches attempted SQLi patterns in the URI, QUERY_STRING, BODY, COOKIES
  # VinylStoreWAFRegionalSQLiSet:
  #   Type: AWS::WAFRegional::SqlInjectionMatchSet
  #   Properties:
  #     Name: VinylStoreWAFRegionalSQLiSet
  #     SqlInjectionMatchTuples:
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: HTML_ENTITY_DECODE
  # VinylStoreWAFGlobalSQLiSet:
  #   Type: AWS::WAF::SqlInjectionMatchSet
  #   Properties:
  #     Name: VinylStoreWAFGlobalSQLiSet
  #     SqlInjectionMatchTuples:
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: HTML_ENTITY_DECODE
  # VinylStoreWAFRegionalSQLiRule:
  #   Type: AWS::WAFRegional::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFRegional", "mitigatesqli"]]
  #     Name: !Join ["-", ["VinylStoreWAFRegional", "mitigate-sqli"]]
  #     Predicates:
  #       - Type: SqlInjectionMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFRegionalSQLiSet
  # VinylStoreWAFGlobalSQLiRule:
  #   Type: AWS::WAF::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFGlobal", "mitigatesqli"]]
  #     Name: !Join ["-", ["VinylStoreWAFGlobal", "mitigate-sqli"]]
  #     Predicates:
  #       - Type: SqlInjectionMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFGlobalSQLiSet
  # ## 2.
  # ## OWASP Top 10 A2
  # ## Blacklist bad/hijacked JWT tokens or session IDs
  # ## Matches the specific values in the cookie or Authorization header
  # ## for JWT it is sufficient to check the signature
  # VinylStoreWAFRegionalAuthTokenStringSet:
  #   Type: AWS::WAFRegional::ByteMatchSet
  #   Properties:
  #     Name: VinylStoreWAFRegionalAuthTokenStringSet
  #     ByteMatchTuples:
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         PositionalConstraint: CONTAINS
  #         TargetString: example-session-id
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: authorization
  #         PositionalConstraint: ENDS_WITH
  #         TargetString: .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
  #         TextTransformation: URL_DECODE
  # VinylStoreWAFGlobalAuthTokenStringSet:
  #   Type: AWS::WAF::ByteMatchSet
  #   Properties:
  #     Name: VinylStoreWAFGlobalAuthTokenStringSet
  #     ByteMatchTuples:
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         PositionalConstraint: CONTAINS
  #         TargetString: example-session-id
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: authorization
  #         PositionalConstraint: ENDS_WITH
  #         TargetString: .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
  #         TextTransformation: URL_DECODE
  # VinylStoreWAFRegionalAuthTokenRule:
  #   Type: AWS::WAFRegional::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFRegional", "badauthtokens"]]
  #     Name: !Join ["-", ["VinylStoreWAFRegional", "detect-bad-auth-tokens"]]
  #     Predicates:
  #       - Type: ByteMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFRegionalAuthTokenStringSet
  # VinylStoreWAFGlobalAuthTokenRule:
  #   Type: AWS::WAF::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFGlobal", "badauthtokens"]]
  #     Name: !Join ["-", ["VinylStoreWAFGlobal", "detect-bad-auth-tokens"]]
  #     Predicates:
  #       - Type: ByteMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFGlobalAuthTokenStringSet
  # ## 3.
  # ## OWASP Top 10 A3
  # ## Mitigate Cross Site Scripting Attacks
  # ## Matches attempted XSS patterns in the URI, QUERY_STRING, BODY, COOKIES
  # VinylStoreWAFRegionalXSSSet:
  #   Type: AWS::WAFRegional::XssMatchSet
  #   Properties:
  #     Name: VinylStoreWAFRegionalXSSSet
  #     XssMatchTuples:
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: HTML_ENTITY_DECODE
  # VinylStoreWAFGlobalXSSSet:
  #   Type: AWS::WAF::XssMatchSet
  #   Properties:
  #     Name: VinylStoreWAFGlobalXSSSet
  #     XssMatchTuples:
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: HTML_ENTITY_DECODE
  # VinylStoreWAFRegionalXSSRule:
  #   Type: AWS::WAFRegional::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFRegional", "mitigatexss"]]
  #     Name: !Join ["-", ["VinylStoreWAFRegional", "mitigate-xss"]]
  #     Predicates:
  #       - Type: XssMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFRegionalXSSSet
  # VinylStoreWAFGlobalXSSRule:
  #   Type: AWS::WAF::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFGlobal", "mitigatexss"]]
  #     Name: !Join ["-", ["VinylStoreWAFGlobal", "mitigate-xss"]]
  #     Predicates:
  #       - Type: XssMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFGlobalXSSSet
  # ## 4.
  # ## OWASP Top 10 A4
  # ## Path Traversal, LFI, RFI
  # ## Matches request patterns designed to traverse filesystem paths, and include
  # ## local or remote files
  # VinylStoreWAFRegionalPathsStringSet:
  #   Type: AWS::WAFRegional::ByteMatchSet
  #   Properties:
  #     Name: VinylStoreWAFRegionalPathsStringSet
  #     ByteMatchTuples:
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: HTML_ENTITY_DECODE
  # VinylStoreWAFGlobalPathsStringSet:
  #   Type: AWS::WAF::ByteMatchSet
  #   Properties:
  #     Name: VinylStoreWAFGlobalPathsStringSet
  #     ByteMatchTuples:
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ../
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: URI
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: HTML_ENTITY_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: URL_DECODE
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         PositionalConstraint: CONTAINS
  #         TargetString: ://
  #         TextTransformation: HTML_ENTITY_DECODE
  # VinylStoreWAFRegionalPathsRule:
  #   Type: AWS::WAFRegional::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFRegional", "detectrfilfi"]]
  #     Name: !Join ["-", ["VinylStoreWAFRegional", "detect-rfi-lfi-traversal"]]
  #     Predicates:
  #       - Type: ByteMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFRegionalPathsStringSet
  # VinylStoreWAFGlobalPathsRule:
  #   Type: AWS::WAF::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFGlobal", "detectrfilfi"]]
  #     Name: !Join ["-", ["VinylStoreWAFGlobal", "detect-rfi-lfi-traversal"]]
  #     Predicates:
  #       - Type: ByteMatch
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFGlobalPathsStringSet
  # ## 7.
  # ## OWASP Top 10 A7
  # ## Mitigate abnormal requests via size restrictions
  # ## Enforce consistent request hygene, limit size of key elements
  # VinylStoreWAFRegionalSizeRestrictionSet:
  #   Type: AWS::WAFRegional::SizeConstraintSet
  #   Properties:
  #     Name: VinylStoreWAFRegionalSizeRestrictionSet
  #     SizeConstraints:
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedURISize
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedQueryStringSize
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedBodySize
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedCookieSize
  # VinylStoreWAFGlobalSizeRestrictionSet:
  #   Type: AWS::WAF::SizeConstraintSet
  #   Properties:
  #     Name: VinylStoreWAFGlobalSizeRestrictionSet
  #     SizeConstraints:
  #       - FieldToMatch:
  #           Type: URI
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedURISize
  #       - FieldToMatch:
  #           Type: QUERY_STRING
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedQueryStringSize
  #       - FieldToMatch:
  #           Type: BODY
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedBodySize
  #       - FieldToMatch:
  #           Type: HEADER
  #           Data: cookie
  #         TextTransformation: NONE
  #         ComparisonOperator: GT
  #         Size: !Ref maxExpectedCookieSize
  # VinylStoreWAFRegionalSizeRestrictionRule:
  #   Type: AWS::WAFRegional::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFRegional", "restrictsizes"]]
  #     Name: !Join ["-", ["VinylStoreWAFRegional", "restrict-sizes"]]
  #     Predicates:
  #       - Type: SizeConstraint
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFRegionalSizeRestrictionSet
  # VinylStoreWAFGlobalSizeRestrictionRule:
  #   Type: AWS::WAF::Rule
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFGlobal", "restrictsizes"]]
  #     Name: !Join ["-", ["VinylStoreWAFGlobal", "restrict-sizes"]]
  #     Predicates:
  #       - Type: SizeConstraint
  #         Negated: false
  #         DataId: !Ref VinylStoreWAFGlobalSizeRestrictionSet
  # ## --
  # ## WebACL containing the above rules evaluated in-order
  # VinylStoreWAFRegionalOwaspACL:
  #   Type: AWS::WAFRegional::WebACL
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFRegional", "owaspacl"]]
  #     Name: !Join ["-", ["VinylStoreWAFRegional", "owasp-acl"]]
  #     DefaultAction:
  #       Type: ALLOW
  #     Rules:
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 10
  #         RuleId: !Ref VinylStoreWAFRegionalSizeRestrictionRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 30
  #         RuleId: !Ref VinylStoreWAFRegionalAuthTokenRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 40
  #         RuleId: !Ref VinylStoreWAFRegionalSQLiRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 50
  #         RuleId: !Ref VinylStoreWAFRegionalXSSRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 60
  #         RuleId: !Ref VinylStoreWAFRegionalPathsRule
  # VinylStoreWAFGlobalOwaspACL:
  #   Type: AWS::WAF::WebACL
  #   Properties:
  #     MetricName: !Join ["", ["VinylStoreWAFGlobal", "owaspacl"]]
  #     Name: !Join ["-", ["VinylStoreWAFGlobal", "owasp-acl"]]
  #     DefaultAction:
  #       Type: ALLOW
  #     Rules:
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 10
  #         RuleId: !Ref VinylStoreWAFGlobalSizeRestrictionRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 30
  #         RuleId: !Ref VinylStoreWAFGlobalAuthTokenRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 40
  #         RuleId: !Ref VinylStoreWAFGlobalSQLiRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 50
  #         RuleId: !Ref VinylStoreWAFGlobalXSSRule
  #       - Action:
  #           Type: !Ref ruleAction
  #         Priority: 60
  #         RuleId: !Ref VinylStoreWAFGlobalPathsRule
#PARAMETERS
Parameters:
  MyAWSRoleARN:
    Type: String
  DeploymentRoleSecretAccessKeyId:
    Type: String
  DeploymentRoleAccessKeyId:
    Type: String
  UsernameTag:
    Type: String
  APIGatewayResourceVinylsPathPart:
    Type: String
  APIGatewayResourcePresignedURLSPathPart:
    Type: String
  LambdaFuncUPDATEVinylsName:
    Type: String
  LambdaFuncDELETEVinylsName:
    Type: String
  LambdaFuncGETVinylsName:
    Type: String
  LambdaFuncPOSTVinylsName:
    Type: String
  LambdaFuncGETPresignedURLSName:
    Type: String
  APIName:
    Type: String
  EnvironmentName:
    Type: String
  VinylStoreCloudFrontS3BucketName:
    Type: String
  VinylStoreLambdaGETVinylsScriptName:
    Type: String
  VinylStoreLambdaPOSTVinylsScriptName:
    Type: String
  VinylStoreLambdaDELETEVinylsScriptName:
    Type: String
  VinylStoreLambdaUPDATEVinylsScriptName:
    Type: String
  VinylStoreLambdaGETPresignedURLSScriptName:
    Type: String
  VinylStoreS3BucketImagesName:
    Type: String
  VinylStoreS3BucketLambdaLayersName:
    Type: String
  VinylStoreCognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
  VinylStoreLambdaLayerAuthorizersKey:
    Type: String
  ruleAction:
    Type: String
    Description: The type of action you want to iplement for the rules in this set. Valid options are COUNT or BLOCK.
    AllowedValues:
      - BLOCK
      - COUNT
    Default: BLOCK
  maxExpectedURISize:
    Type: Number
    Description: Maximum number of bytes allowed in the URI component of the HTTP request. Generally the maximum possible value is determined by the server operating system (maps to file system paths), the web server software, or other middleware components. Choose a value that accomodates the largest URI segment you use in practice in your web application.
    Default: 512
  maxExpectedQueryStringSize:
    Type: Number
    Description: Maximum number of bytes allowed in the query string component of the HTTP request. Normally the  of query string parameters following the "?" in a URL is much larger than the URI , but still bounded by the  of the parameters your web application uses and their values.
    Default: 1024
  maxExpectedBodySize:
    Type: Number
    Description: Maximum number of bytes allowed in the body of the request. If you do not plan to allow large uploads, set it to the largest payload value that makes sense for your web application. Accepting unnecessarily large values can cause performance issues, if large payloads are used as an attack vector against your web application.
    Default: 4096
  maxExpectedCookieSize:
    Type: Number
    Description: Maximum number of bytes allowed in the cookie header. The maximum size should be less than 4096, the size is determined by the amount of information your web application stores in cookies. If you only pass a session token via cookies, set the size to no larger than the serialized size of the session token and cookie metadata.
    Default: 4093
Outputs:
  VinylStoreCognitoUserPoolID:
    Value: !Ref VinylStoreCognitoUserPool
    Description: Vinyl Store Cognito UserPool ID
  VinylStoreCognitoPoolClientID:
    Value: !Ref VinylStoreCognitoUserPoolClient
    Description: Vinyl Store Cognito UserPoolClient ID
  HostedUIURL:
    Value: !Sub https://${VinylStoreCognitoDomain}.auth.us-east-1.amazoncognito.com/login?client_id=${VinylStoreCognitoUserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:4200/home
    Description: Vinyl Store Cognito hosted UI URL
  IdentityPoolID:
    Value: !Ref VinylStoreCognitoIdentityPool
    Description: Vinyl Store Cognito Identity Pool ID
  LambdaExampleArn:
    Value: !GetAtt VinylStoreLambdaGETVinyls.Arn
  ExampleAccountId:
    Value: !Sub ${AWS::AccountId}
